import numpy as np
import warnings
import copy

warnings.filterwarnings('ignore')

plaintext = np.array(
    [[0x32, 0x30, 0x32, 0x31], [0x30, 0x30, 0x34, 0x36], [0x30, 0x30, 0x35, 0x35], [0x00, 0x00, 0x00, 0x00]],
    dtype=np.uint8)
ciphertext = np.zeros((4, 4), dtype=np.uint8)
key = plaintext.copy()
rcon = np.array([
    [0x01, 0x00, 0x00, 0x00],
    [0x02, 0x00, 0x00, 0x00],
    [0x04, 0x00, 0x00, 0x00],
    [0x08, 0x00, 0x00, 0x00],
    [0x10, 0x00, 0x00, 0x00],
    [0x20, 0x00, 0x00, 0x00],
    [0x40, 0x00, 0x00, 0x00],
    [0x80, 0x00, 0x00, 0x00],
    [0x1B, 0x00, 0x00, 0x00],
    [0x36, 0x00, 0x00, 0x00]
], dtype=np.uint8)

Mix_Columns_Table = np.zeros((256, 4), dtype=np.uint8)

keys = np.zeros((11, 4, 4), dtype=np.uint8)

S_Box = {
    '0x0': 0x63, '0x1': 0x7c, '0x2': 0x77, '0x3': 0x7b, '0x4': 0xf2, '0x5': 0x6b, '0x6': 0x6f, '0x7': 0xc5, '0x8': 0x30,
    '0x9': 0x01, '0xa': 0x67, '0xb': 0x2b, '0xc': 0xfe, '0xd': 0xd7, '0xe': 0xab, '0xf': 0x76,
    '0x10': 0xca, '0x11': 0x82, '0x12': 0xc9, '0x13': 0x7d, '0x14': 0xfa, '0x15': 0x59, '0x16': 0x47, '0x17': 0xf0,
    '0x18': 0xad, '0x19': 0xd4, '0x1a': 0xa2, '0x1b': 0xaf, '0x1c': 0x9c, '0x1d': 0xa4, '0x1e': 0x72, '0x1f': 0xc0,
    '0x20': 0xb7, '0x21': 0xfd, '0x22': 0x93, '0x23': 0x26, '0x24': 0x36, '0x25': 0x3f, '0x26': 0xf7, '0x27': 0xcc,
    '0x28': 0x34, '0x29': 0xa5, '0x2a': 0xe5, '0x2b': 0xf1, '0x2c': 0x71, '0x2d': 0xd8, '0x2e': 0x31, '0x2f': 0x15,
    '0x30': 0x04, '0x31': 0xc7, '0x32': 0x23, '0x33': 0xc3, '0x34': 0x18, '0x35': 0x96, '0x36': 0x05, '0x37': 0x9a,
    '0x38': 0x07, '0x39': 0x12, '0x3a': 0x80, '0x3b': 0xe2, '0x3c': 0xeb, '0x3d': 0x27, '0x3e': 0xb2, '0x3f': 0x75,
    '0x40': 0x09, '0x41': 0x83, '0x42': 0x2c, '0x43': 0x1a, '0x44': 0x1b, '0x45': 0x6e, '0x46': 0x5a, '0x47': 0xa0,
    '0x48': 0x52, '0x49': 0x3b, '0x4a': 0xd6, '0x4b': 0xb3, '0x4c': 0x29, '0x4d': 0xe3, '0x4e': 0x2f, '0x4f': 0x84,
    '0x50': 0x53, '0x51': 0xd1, '0x52': 0x00, '0x53': 0xed, '0x54': 0x20, '0x55': 0xfc, '0x56': 0xb1, '0x57': 0x5b,
    '0x58': 0x6a, '0x59': 0xcb, '0x5a': 0xbe, '0x5b': 0x39, '0x5c': 0x4a, '0x5d': 0x4c, '0x5e': 0x58, '0x5f': 0xcf,
    '0x60': 0xd0, '0x61': 0xef, '0x62': 0xaa, '0x63': 0xfb, '0x64': 0x43, '0x65': 0x4d, '0x66': 0x33, '0x67': 0x85,
    '0x68': 0x45, '0x69': 0xf9, '0x6a': 0x02, '0x6b': 0x7f, '0x6c': 0x50, '0x6d': 0x3c, '0x6e': 0x9f, '0x6f': 0xa8,
    '0x70': 0x51, '0x71': 0xa3, '0x72': 0x40, '0x73': 0x8f, '0x74': 0x92, '0x75': 0x9d, '0x76': 0x38, '0x77': 0xf5,
    '0x78': 0xbc, '0x79': 0xb6, '0x7a': 0xda, '0x7b': 0x21, '0x7c': 0x10, '0x7d': 0xff, '0x7e': 0xf3, '0x7f': 0xd2,
    '0x80': 0xcd, '0x81': 0x0c, '0x82': 0x13, '0x83': 0xec, '0x84': 0x5f, '0x85': 0x97, '0x86': 0x44, '0x87': 0x17,
    '0x88': 0xc4, '0x89': 0xa7, '0x8a': 0x7e, '0x8b': 0x3d, '0x8c': 0x64, '0x8d': 0x5d, '0x8e': 0x19, '0x8f': 0x73,
    '0x90': 0x60, '0x91': 0x81, '0x92': 0x4f, '0x93': 0xdc, '0x94': 0x22, '0x95': 0x2a, '0x96': 0x90, '0x97': 0x88,
    '0x98': 0x46, '0x99': 0xee, '0x9a': 0xb8, '0x9b': 0x14, '0x9c': 0xde, '0x9d': 0x5e, '0x9e': 0x0b, '0x9f': 0xdb,
    '0xa0': 0xe0, '0xa1': 0x32, '0xa2': 0x3a, '0xa3': 0x0a, '0xa4': 0x49, '0xa5': 0x06, '0xa6': 0x24, '0xa7': 0x5c,
    '0xa8': 0xc2, '0xa9': 0xd3, '0xaa': 0xac, '0xab': 0x62, '0xac': 0x91, '0xad': 0x95, '0xae': 0xe4, '0xaf': 0x79,
    '0xb0': 0xe7, '0xb1': 0xc8, '0xb2': 0x37, '0xb3': 0x6d, '0xb4': 0x8d, '0xb5': 0xd5, '0xb6': 0x4e, '0xb7': 0xa9,
    '0xb8': 0x6c, '0xb9': 0x56, '0xba': 0xf4, '0xbb': 0xea, '0xbc': 0x65, '0xbd': 0x7a, '0xbe': 0xae, '0xbf': 0x08,
    '0xc0': 0xba, '0xc1': 0x78, '0xc2': 0x25, '0xc3': 0x2e, '0xc4': 0x1c, '0xc5': 0xa6, '0xc6': 0xb4, '0xc7': 0xc6,
    '0xc8': 0xe8, '0xc9': 0xdd, '0xca': 0x74, '0xcb': 0x1f, '0xcc': 0x4b, '0xcd': 0xbd, '0xce': 0x8b, '0xcf': 0x8a,
    '0xd0': 0x70, '0xd1': 0x3e, '0xd2': 0xb5, '0xd3': 0x66, '0xd4': 0x48, '0xd5': 0x03, '0xd6': 0xf6, '0xd7': 0x0e,
    '0xd8': 0x61, '0xd9': 0x35, '0xda': 0x57, '0xdb': 0xb9, '0xdc': 0x86, '0xdd': 0xc1, '0xde': 0x1d, '0xdf': 0x9e,
    '0xe0': 0xe1, '0xe1': 0xf8, '0xe2': 0x98, '0xe3': 0x11, '0xe4': 0x69, '0xe5': 0xd9, '0xe6': 0x8e, '0xe7': 0x94,
    '0xe8': 0x9b, '0xe9': 0x1e, '0xea': 0x87, '0xeb': 0xe9, '0xec': 0xce, '0xed': 0x55, '0xee': 0x28, '0xef': 0xdf,
    '0xf0': 0x8c, '0xf1': 0xa1, '0xf2': 0x89, '0xf3': 0x0d, '0xf4': 0xbf, '0xf5': 0xe6, '0xf6': 0x42, '0xf7': 0x68,
    '0xf8': 0x41, '0xf9': 0x99, '0xfa': 0x2d, '0xfb': 0x0f, '0xfc': 0xb0, '0xfd': 0x54, '0xfe': 0xbb, '0xff': 0x16}


def mul(x, y):
    """计算有限域上的1x,2x,3x"""
    res = 0
    if x == 0x01:
        res = y
    elif x == 0x02:
        if (y & 0x80) == 0x00:
            res = y << 1 & 0b011111111
        else:
            res = (y << 1 & 0b011111111) ^ 0x1b
    elif x == 0x03:
        res = mul(0x02, y) ^ y
    return res


def Generate_Table():
    """生成{2x,x,x,3x}的列混合查找表"""
    global plaintext, S_BOX, Mix_Columns_Table
    for i in range(256):
        j = hex(i)
        Mix_Columns_Table[i][0] = mul(0x2, S_Box.get(j))
        Mix_Columns_Table[i][1] = S_Box.get(j)
        Mix_Columns_Table[i][2] = S_Box.get(j)
        Mix_Columns_Table[i][3] = mul(0x3, S_Box.get(j))


def Key_Expansion():
    """生成轮密钥，用keys（11 X ）储存"""
    global keys, key
    # 第一轮的密钥是原始密钥
    for i in range(4):
        keys[0][0][i] = key[i][0]
        keys[0][1][i] = key[i][1]
        keys[0][2][i] = key[i][2]
        keys[0][3][i] = key[i][3]

    # 剩余10轮密钥生成
    for i in range(1, 11):  # i表示第i个轮密钥
        # 字循环+字代替
        arr = np.zeros((4,), dtype=np.uint8)
        arr[0] = S_Box.get(hex(keys[i - 1][1][3]))
        arr[1] = S_Box.get(hex(keys[i - 1][2][3]))
        arr[2] = S_Box.get(hex(keys[i - 1][3][3]))
        arr[3] = S_Box.get(hex(keys[i - 1][0][3]))
        # 与轮常量异或
        for k in range(4):
            arr[k] = arr[k] ^ rcon[i - 1][k]
        # 再次异或
        for m in range(4):  # 求W4
            keys[i][0][0] = arr[0] ^ keys[i - 1][0][0]
            keys[i][1][0] = arr[1] ^ keys[i - 1][1][0]
            keys[i][2][0] = arr[2] ^ keys[i - 1][2][0]
            keys[i][3][0] = arr[3] ^ keys[i - 1][3][0]

        for s in range(1, 4):  # 生成W5，W6，W7，s表示列，t表示行
            for t in range(4):
                keys[i][t][s] = keys[i - 1][t][s] ^ keys[i][t][s - 1]


def AddRoundKey(round):
    """每一轮加密中列混合的结果与轮密钥异或"""
    global keys, ciphertext
    for i in range(4):
        for j in range(4):
            ciphertext[i][j] = ciphertext[i][j] ^ keys[round][i][j]


def SubBytes():
    """最后一轮需要用到S盒"""
    global ciphertext
    for i in range(4):
        for j in range(4):
            ciphertext[i][j] = S_Box.get(hex(ciphertext[i][j]))


def ShiftRows():
    """行移位"""
    global ciphertext
    for i in range(1, 4):
        brr = np.zeros((4,), dtype=np.uint8)
        for j in range(4):
            brr[j] = ciphertext[i][j]
        if (i == 1):
            temp = ciphertext[i][0]
            ciphertext[i][0] = ciphertext[i][1]
            ciphertext[i][1] = ciphertext[i][2]
            ciphertext[i][2] = ciphertext[i][3]
            ciphertext[i][3] = temp
        elif (i == 2):
            ciphertext[i][0] = brr[2]
            ciphertext[i][1] = brr[3]
            ciphertext[i][2] = brr[0]
            ciphertext[i][3] = brr[1]
        elif (i == 3):
            ciphertext[i][0] = brr[3]
            ciphertext[i][1] = brr[0]
            ciphertext[i][2] = brr[1]
            ciphertext[i][3] = brr[2]


def MixColumns():
    """列混合"""
    global ciphertext
    for i in range(4):  # i是列循环
        temp = [ciphertext[0][i], ciphertext[1][i], ciphertext[2][i], ciphertext[3][i]]
        '''
        ciphertext[0][i] = mul(0x02, temp[0]) ^ mul(0x03, temp[1]) ^ mul(0x01, temp[2]) ^ mul(0x01, temp[3])
        ciphertext[1][i] = mul(0x01, temp[0]) ^ mul(0x02, temp[1]) ^ mul(0x03, temp[2]) ^ mul(0x01, temp[3])
        ciphertext[2][i] = mul(0x01, temp[0]) ^ mul(0x01, temp[1]) ^ mul(0x02, temp[2]) ^ mul(0x03, temp[3])
        ciphertext[3][i] = mul(0x03, temp[0]) ^ mul(0x01, temp[1]) ^ mul(0x01, temp[2]) ^ mul(0x02, temp[3])'''

        ciphertext[0][i] = Mix_Columns_Table[temp[0]][0] ^ Mix_Columns_Table[temp[1]][3] ^ Mix_Columns_Table[temp[2]][
            2] ^ Mix_Columns_Table[temp[3]][1]
        ciphertext[1][i] = Mix_Columns_Table[temp[0]][1] ^ Mix_Columns_Table[temp[1]][0] ^ Mix_Columns_Table[temp[2]][
            3] ^ Mix_Columns_Table[temp[3]][2]
        ciphertext[2][i] = Mix_Columns_Table[temp[0]][2] ^ Mix_Columns_Table[temp[1]][1] ^ Mix_Columns_Table[temp[2]][
            0] ^ Mix_Columns_Table[temp[3]][3]
        ciphertext[3][i] = Mix_Columns_Table[temp[0]][3] ^ Mix_Columns_Table[temp[1]][2] ^ Mix_Columns_Table[temp[2]][
            1] ^ Mix_Columns_Table[temp[3]][0]


def Encrypt():
    """加密函数"""

    # 密钥生成
    Key_Expansion()
    global plaintext, key, keys, ciphertext, Mix_Columns_Table
    ciphertext = plaintext.copy()
    for i in range(4):
        ciphertext[0][i] = plaintext[i][0]
        ciphertext[1][i] = key[i][1]
        ciphertext[2][i] = key[i][2]
        ciphertext[3][i] = key[i][3]
    # 打印明文
    print("明文：")
    for i in range(4):
        for j in range(4):
            print(hex(plaintext[i][j]), end=' ')
        print("\n")

    # 打印密钥
    print("密钥：")
    for i in range(4):
        for j in range(4):
            print(hex(key[i][j]), end=' ')
        print("\n")

    # 生成11组轮密钥
    Key_Expansion()

    # 第一轮加密
    AddRoundKey(0)

    # 第1~9轮加密
    for i in range(1, 10):
        # SubBytes()
        ShiftRows()
        MixColumns()
        AddRoundKey(i)

    # 第10轮加密
    SubBytes()
    ShiftRows()
    AddRoundKey(10)

    # 打印密文
    print("密文：")
    for i in range(4):
        for j in range(4):
            print(hex(ciphertext[i][j]), end=' ')
        print("\n")


if __name__ == '__main__':
    # 生成查找表
    Generate_Table()
    Encrypt()
